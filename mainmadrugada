CREATE TABLE Cliente (
  	id_cli          SERIAL NOT NULL PRIMARY KEY,
  	nome_cli        VARCHAR(40) NOT NULL,
  	cpf             VARCHAR(15),
  	bairro_cli      VARCHAR(15) NOT NULL,
  	num_cli         VARCHAR(12) NOT NULL,
  	logradouro_cli  VARCHAR(25) NOT NULL,
  	cep_cli         VARCHAR(11) NOT NULL,
  	cidade_cli      VARCHAR(20) NOT NULL,
	email_cli		VARCHAR(25),
	telefone		VARCHAR(12) NOT NULL
);

CREATE TABLE Fornecedor (
  	id_fn             SERIAL NOT NULL PRIMARY KEY,
  	nome_fn           VARCHAR(40) NOT NULL,
  	bairro_fn         VARCHAR(20) NOT NULL,
  	num_fn            VARCHAR(13) NOT NULL,
  	logradouro_fn     VARCHAR(15) NOT NULL,
  	cep_fn            VARCHAR(13) NOT NULL,
  	cidade_fn         VARCHAR(20) NOT NULL,
	telefone_fn		  VARCHAR(15) NOT NULL,
	cpf_fn			  VARCHAR(15) NOT NULL,
	email_fn		  VARCHAR(25),
	telefone 		  VARCHAR(12) NOT NULL
);

CREATE TABLE Compra (
  	id_compra               SERIAL NOT NULL PRIMARY KEY,
	fn_compra_id          	INT NOT NULL REFERENCES Fornecedor(id_fn),
  	dt_compra               TIMESTAMPTZ NOT NULL,
  	valor_total_compra      FLOAT NOT NULL
);

CREATE TABLE ItemCompra (
  	compraId                   INT NOT NULL REFERENCES Compra(id_compra),
  	estoqueId                  INT NOT NULL REFERENCES Estoque(id_estoque),
  	qtdComprada                INT NOT NULL,
	valor_total_item_c 		   FLOAT NOT NULL,
	preco_prod_c			   REAL NOT NULL,
  	--dt_compra                TIMESTAMPTZ NOT NULL,
  	CONSTRAINT PRI_ITEM_COMPRA PRIMARY KEY (compraId, estoqueId)
);

CREATE TABLE Venda (
  	id_venda               SERIAL NOT NULL PRIMARY KEY,
  	cli_venda_id           INT NOT NULL REFERENCES Cliente(id_cli),
  	valor_total_venda      REAL NOT NULL,
  	dt_venda		       TIMESTAMPTZ NOT NULL,
	qtd_itens			   INT NOT NULL,
  	qtd_parcelas	       INT NOT NULL
);

CREATE TABLE ItemVenda (
	vendaId                INT NOT NULL REFERENCES Venda(id_venda),
  	estoqueId              INT NOT NULL REFERENCES Estoque(id_estoque),
	qtd_vendida		   	   INT NOT NULL,
	valor_total_item_v     REAL NOT NULL,
  	CONSTRAINT PRI_ITEM_VENDA PRIMARY KEY (estoqueId, vendaId)
);

CREATE TABLE Empresa (
  	id_emp           SERIAL NOT NULL PRIMARY KEY,
  	nome_emp         VARCHAR(15) NOT NULL,
  	email_emp        VARCHAR(25) NOT NULL, --CRIAR VIEW DE CADA EMPRESA PARA SEU PROPRIO BD
  	senha_emp        VARCHAR(8) NOT NULL
);

CREATE TABLE Estoque (
 	id_estoque        SERIAL NOT NULL PRIMARY KEY,
	empId             INT NOT NULL REFERENCES Empresa(id_emp) ON DELETE CASCADE,
  	prodId            INT NOT NULL REFERENCES Produto(id_prod) ON DELETE CASCADE,
	preco_prod	      REAL NOT NULL, --preço de venda do produto
	quant_estq		  INT NOT NULL
);

CREATE TABLE Produto (
  	id_prod             SERIAL PRIMARY KEY NOT NULL,
  	nome_prod           VARCHAR NOT NULL
);


------------------------------------------------------------------------------------------
--INSERT
------------------------------------------------------------------------------------------
-- Inserção de empresas
INSERT INTO Empresa (nome_emp, email_emp, senha_emp)
VALUES ('Empresa A', 'empresaA@example.com', 'senhaA');

INSERT INTO Empresa (nome_emp, email_emp, senha_emp)
VALUES ('Empresa B', 'empresaB@example.com', 'senhaB');

INSERT INTO Empresa (nome_emp, email_emp, senha_emp)
VALUES ('Empresa C', 'empresaC@example.com', 'senhaC');

-- Inserção de produtos
INSERT INTO Produto (id_prod, nome_prod)
VALUES (DEFAULT, 'Produto A');

INSERT INTO Produto (id_prod, nome_prod)
VALUES (DEFAULT, 'Produto B');

INSERT INTO Produto (id_prod, nome_prod)
VALUES (DEFAULT, 'Produto C');

--Inserção estoque
SELECT * FROM EMPRESA
SELECT * FROM ESTOQUE
SELECT * FROM PRODUTO
INSERT INTO ESTOQUE VALUES(DEFAULT, 1, 1, 12.5, 100);
INSERT INTO ESTOQUE VALUES(DEFAULT, 1, )

-- Inserção de clientes
INSERT INTO Cliente (nome_cli, cpf, bairro_cli, num_cli, logradouro_cli, cep_cli, cidade_cli, email_cli, telefone)
VALUES ('Maria Santos', '987.654.321-00', 'Centro', '456', 'Rua Principal', '54321-098', 'São Paulo', 'maria@example.com', '86995002359');

INSERT INTO Cliente (nome_cli, cpf, bairro_cli, num_cli, logradouro_cli, cep_cli, cidade_cli, email_cli, telefone)
VALUES ('Pedro Oliveira', '111.222.333-44', 'Bairro A', '789', 'Avenida dois', '98765-432', 'Rio de Janeiro', 'pedro@example.com', '86995123459');

INSERT INTO Cliente (nome_cli, cpf, bairro_cli, num_cli, logradouro_cli, cep_cli, cidade_cli, email_cli, telefone)
VALUES ('Ana Silva', '555.666.777-88', 'Bairro B', '321', 'Rua Alternativa', '12345-678', 'Curitiba', 'ana@example.com', '81547682341');

-- Inserção de fornecedores
INSERT INTO Fornecedor (nome_fn, bairro_fn, num_fn, logradouro_fn, cep_fn, cidade_fn, telefone_fn, cpf_fn, email_fn)
VALUES ('Fornecedor A', 'Centro', '123', 'Rua Principal', '12345-678', 'São Paulo', '11123456789', '123.456.789-00', 'fornecedorA@example.com');

INSERT INTO Fornecedor (nome_fn, bairro_fn, num_fn, logradouro_fn, cep_fn, cidade_fn, telefone_fn, cpf_fn, email_fn)
VALUES ('Fornecedor B', 'Bairro A', '789', 'Avenida Dois', '98765-432', 'Teresina', '21987654321', '987.654.321-00', 'fornecedorB@example.com');

INSERT INTO Fornecedor (nome_fn, bairro_fn, num_fn, logradouro_fn, cep_fn, cidade_fn, telefone_fn, cpf_fn, email_fn)
VALUES ('Fornecedor C', 'Bairro B', '321', 'Rua Alternativa', '12345-678', 'Curitiba', '41123456789', '555.666.777-88', 'fornecedorC@example.com');

select * from fornecedor

-- Inserção de compras
INSERT INTO Compra (fn_compra_id, dt_compra, valor_total_compra)
VALUES (3, CURRENT_TIMESTAMP, 1000.0);

INSERT INTO Compra (fn_compra_id, dt_compra, valor_total_compra)
VALUES (4, CURRENT_TIMESTAMP, 1500.0);

INSERT INTO Compra (fn_compra_id, dt_compra, valor_total_compra)
VALUES (5, CURRENT_TIMESTAMP, 800.0);


select * from compra
-- Inserção de itens de compra
INSERT INTO ItemCompra (compraId, estoqueId, qtdComprada, valor_total_item_c, preco_prod_c)
VALUES (2, 1, 5, 500.0, 100.0);

INSERT INTO ItemCompra (compraId, estoqueId, qtdComprada, valor_total_item_c, preco_prod_c)
VALUES (3, 2, 10, 1000.0, 100.0);

INSERT INTO ItemCompra (compraId, estoqueId, qtdComprada, valor_total_item_c, preco_prod_c)
VALUES (4, 3, 4, 320.0, 80.0);


-- Inserção de vendas
INSERT INTO Venda (cli_venda_id, valor_total_venda, dt_venda, qtd_itens, qtd_parcelas)
VALUES (1, 500.0, CURRENT_TIMESTAMP, 2, 1);

INSERT INTO Venda (cli_venda_id, valor_total_venda, dt_venda, qtd_itens, qtd_parcelas)
VALUES (2, 800.0, CURRENT_TIMESTAMP, 3, 2);

INSERT INTO Venda (cli_venda_id, valor_total_venda, dt_venda, qtd_itens, qtd_parcelas)
VALUES (3, 200.0, CURRENT_TIMESTAMP, 1, 1);


-- Inserção de itens de venda
INSERT INTO ItemVenda (vendaId, estoqueId, preco_item_v, qtd_vendida, valor_total_item_v)
VALUES (1, 1, 100.0, 1, 100.0);

INSERT INTO ItemVenda (vendaId, estoqueId, preco_item_v, qtd_vendida, valor_total_item_v)
VALUES (2, 2, 200.0, 2, 400.0);

INSERT INTO ItemVenda (vendaId, estoqueId, preco_item_v, qtd_vendida, valor_total_item_v)
VALUES (3, 3, 80.0, 1, 80.0);

select * from estoque


------------------------------------------------------------------------------------------
--FUNCTIONS
------------------------------------------------------------------------------------------
/*-----------------------------
	VALIDAR CPF
*/-----------------------------
CREATE OR REPLACE FUNCTION validar_cpf(cpf TEXT)
RETURNS VOID AS $$
DECLARE
    soma1 INT := 0;
    soma2 INT := 0;
    i INT;
    digito1 INT;
    digito2 INT;
    multiplicador INT := 10;
    cpf_limpo TEXT;
BEGIN
    -- Remover caracteres não numéricos do CPF
    cpf_limpo := regexp_replace(cpf, '[^0-9]', '', 'g');
    
    -- Verificar se o CPF tem 11 dígitos
    IF length(cpf_limpo) <> 11 THEN
		RAISE EXCEPTION 'CPF INVÁLIDO. O CAMPO DEVE POSSUIR 11 DÍGITOS!';
    END IF;
    
    -- Verificar se todos os dígitos são iguais
    IF cpf_limpo = repeat(cpf_limpo[1], 11) THEN
		RAISE EXCEPTION 'TODOS OS DIGITOS SÃO IGUAIS';
	END IF;
    
    -- Cálculo do primeiro dígito verificador
    FOR i IN 1..9 LOOP
        soma1 := soma1 + CAST(cpf_limpo[i] AS INT) * multiplicador;
        multiplicador := multiplicador - 1;
    END LOOP;
    
    digito1 := (soma1 * 10) % 11;
    IF digito1 = 10 THEN
        digito1 := 0;
    END IF;
    
    -- Cálculo do segundo dígito verificador
    multiplicador := 11;
    FOR i IN 1..10 LOOP
        soma2 := soma2 + CAST(cpf_limpo[i] AS INT) * multiplicador;
        multiplicador := multiplicador - 1;
    END LOOP;
    
    digito2 := (soma2 * 10) % 11;
    IF digito2 = 10 THEN
        digito2 := 0;
    END IF;
    
    -- Verificar se os dígitos verificadores são válidos
    IF digito1 = CAST(cpf_limpo[10] AS INT) AND digito2 = CAST(cpf_limpo[11] AS INT) THEN
        RAISE LOG 'CPF VÁLIDO';
	END IF;

    RAISE EXCEPTION 'CPF INVÁLIDO. DÍGITOS VERIFICADORES INCORRETOS!';
END;
$$ LANGUAGE plpgsql;

/*-----------------------------------
	VALIDAR CPNJ
*/-----------------------------------

CREATE OR REPLACE FUNCTION validar_cnpj(cnpj TEXT)
RETURNS VOID AS $$
DECLARE
    cnpj_limpo TEXT;
    multiplicador1 CONSTANT INTEGER[] := ARRAY[5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
    multiplicador2 CONSTANT INTEGER[] := ARRAY[6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
    soma1 INT := 0;
    soma2 INT := 0;
    digito1 INT;
    digito2 INT;
    resto INT;
BEGIN
    -- Remover caracteres não numéricos do CNPJ
    cnpj_limpo := regexp_replace(cnpj, '[^0-9]', '', 'g');
    
    -- Verificar se o CNPJ tem 14 dígitos
    IF length(cnpj_limpo) <> 14 THEN
        RAISE EXCEPTION 'CNPJ INVÁLIDO. O CAMPO DEVE POSSUIR 14 DÍGITOS!';
    END IF;
    
    -- Verificar se todos os dígitos são iguais
    IF cnpj_limpo = repeat(cnpj_limpo[1], 14) THEN
        RAISE EXCEPTION 'TODOS OS DÍGITOS DO CNPJ SÃO IGUAIS!';
    END IF;
    
    -- Cálculo do primeiro dígito verificador
    FOR i IN 1..12 LOOP
        soma1 := soma1 + CAST(cnpj_limpo[i] AS INT) * multiplicador1[i];
    END LOOP;
    
    resto := soma1 % 11;
    
    IF resto < 2 THEN
        digito1 := 0;
    ELSE
        digito1 := 11 - resto;
    END IF;
    
    -- Cálculo do segundo dígito verificador
    FOR i IN 1..13 LOOP
        soma2 := soma2 + CAST(cnpj_limpo[i] AS INT) * multiplicador2[i];
    END LOOP;
    
    resto := soma2 % 11;
    
    IF resto < 2 THEN
        digito2 := 0;
    ELSE
        digito2 := 11 - resto;
    END IF;
    
    -- Verificar se os dígitos verificadores são válidos
    IF digito1 = CAST(cnpj_limpo[13] AS INT) AND digito2 = CAST(cnpj_limpo[14] AS INT) THEN
        RAISE LOG 'CNPJ VÁLIDO!';
    ELSE
        RAISE EXCEPTION 'CNPJ INVÁLIDO!';
    END IF;
END;
$$ LANGUAGE plpgsql;

/*----------------------------------
	VALIDAR SE É CPF OU NPJ
*/----------------------------------
CREATE OR REPLACE FUNCTION verificar_cnpj_cpf(dado TEXT)
RETURNS BOOLEAN AS $$
BEGIN
    -- Remover caracteres não numéricos do dado
    dado := regexp_replace(dado, '[^0-9]', '', 'g');
    
    -- Verificar se é CNPJ (14 dígitos) ou CPF (11 dígitos)
    IF length(dado) = 14 THEN
        RETURN TRUE;  -- É CNPJ
    ELSIF length(dado) = 11 THEN
        RETURN FALSE;  -- É CPF
    ELSE
        RETURN NULL;  -- Não é CNPJ nem CPF
    END IF;
END;
$$ LANGUAGE plpgsql;


/*----------------------------
	VALIDAR TELEFONE
*/----------------------------
CREATE OR REPLACE FUNCTION validar_telefone(telefone TEXT)
RETURNS VOID AS $$
BEGIN
    -- Remover caracteres não numéricos do telefone
    telefone := regexp_replace(telefone, '[^0-9]', '', 'g');
    
    -- Verificar se o telefone tem 10 dígitos (incluindo o código de área)
    IF length(telefone) <> 11 THEN
        RAISE EXCEPTION 'TELEFONE INVÁLIDO';
    END IF;
END;
$$ LANGUAGE plpgsql;



/*---------------------------------------------------------------
	VALIDAR EMAIL
*/----------------------------------------------------------------
CREATE OR REPLACE FUNCTION validar_email(email TEXT)
RETURNS VOID AS $$
BEGIN
    -- Verificar se o email tem pelo menos um @ e um ponto após o @
    IF position('@' IN email) = 0 OR position('.' IN substring(email, position('@' IN email))) = 0 THEN
        RAISE EXCEPTION 'EMAIL INVÁLIDO'
    END IF;
    
    -- Verificar se o email não começa ou termina com um ponto
    IF email LIKE '.%' OR email LIKE '%.' THEN
		RAISE EXCEPTION 'EMAIL INVÁLIDO'
	END IF;
    
    -- Verificar se o email não contém espaços em branco
    IF position(' ' IN email) <> 0 THEN
		RAISE EXCEPTION 'EMAIL INVÁLIDO'
	END IF;   
END;
$$ LANGUAGE plpgsql;




/*-----------------------------------------------------------------------
	VALIDAR CEP
*/-----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION validar_cep(cep TEXT)
RETURNS VOID AS $$
BEGIN
    -- Remover caracteres não numéricos do CEP
    cep := regexp_replace(cep, '[^0-9]', '', 'g');
    
    -- Verificar se o CEP tem 8 dígitos
    IF length(cep) <> 8 THEN
        RAISE EXCEPTION 'CEP INVÁLIDO';
    END IF;
END;
$$ LANGUAGE plpgsql;



/*=====================================================================================================
			TRIGGERS
*/-----------------------------------------------------
----------------------- VALIDAR CLIENTE --------------------------------
		
CREATE OR REPLACE FUNCTION T_VALIDAR_CLIENTE()
RETURNS TRIGGER AS $$
	BEGIN
		PERFORM VALIDAR_EMAIL(NEW.EMAIL);
		PERFORM VALIDAR_TELEFONE(NEW.TELEFONE);
		PERFORM VALIDAR_CEP(NEW.CEP);
		PERFORM VALIDAR_CPF(NEW.CPF);
		RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';


CREATE OR REPLACE TRIGGER TRIGGER_VALIDAR_CLIENTE 
BEFORE INSERT OR UPDATE ON CLIENTE
FOR EACH ROW
EXECUTE PROCEDURE T_VALIDAR_CLIENTE


-------------------------------------------------------------------------

---------------------- VALIDAR FORNECEDOR -------------------------------

CREATE OR REPLACE FUNCTION T_VALIDAR_FORNECEDOR()
RETURNS TRIGGER AS $$
	BEGIN
		PERFORM VALIDAR_EMAIL(NEW.EMAIL);
		PERFORM VALIDAR_TELEFONE(NEW.TELEFONE);
		PERFORM VALIDAR_CEP(NEW.CEP);
		
		IF VERIFICAR_CNPJ_CPF(NEW.CPF) THEN
			PERFORM VALIDAR_CPF(NEW.CPF);
		ELSE
			PERFORM VALIDAR_CNPJ(NEW.CNPJ);
		END IF;
		
		RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';


CREATE OR REPLACE TRIGGER TRIGGER_VALIDAR_FORNECEDOR
BEFORE INSERT OR UPDATE ON FORNECEDOR
FOR EACH ROW
EXECUTE PROCEDURE T_VALIDAR_FORNECEDOR




--==============================================================================================================
--							CADASTROS
--=============================================================================================================
/*----------------------------
	CADASTRAR EMPRESA
*/----------------------------
CREATE OR REPLACE FUNCTION CADASTRAR_EMPRESA(
	NOME_EMP VARCHAR(15), EMAIL_EMP VARCHAR(25), SENHA_EMP VARCHAR(8), CARGO_ID(4)
)
RETURNS void AS
$$
DECLARE
	  VAR_CARGO TEXT;
BEGIN
	  SELECT NOME_CARGO INTO VAR_CARGO FROM CARGO WHERE ID_CARGO = CARGO_ID -- ADICIONAR TABELA CARGO
	  
	  EXECUTE format('CREATE USER "%I" WITH LOGIN PASSWORD %L VALID UNTIL %L', NOME_EMP, EMAIL_EMP, SENHA_EMP);
      EXECUTE format('ALTER GROUP "%I" ADD USER "%I"', VAR_CARGO, NOME_EMP);
	  
	  INSERT INTO CLIENTE VALUES 
	  (DEFAULT, NOME_EMP, EMAIL_EMP, SENHA_EMP;
	  RAISE NOTICE 'EMPRESA CADASTRADO COM SUCESSO!';
END;
$$
LANGUAGE plpgsql;

/*----------------------------
	CADASTRAR CLIENTE
*/----------------------------
CREATE OR REPLACE FUNCTION CADASTRAR_CLIENTE(
	nome_cli VARCHAR(40),
	CPF VARCHAR(15),
	bairro_cli VARCHAR(15),
	num_cli VARCHAR(12),
	logradouro_cli VARCHAR(25),
	cep_cli VARCHAR(11),
	cidade_cli VARCHAR(20),
	email_cli VARCHAR(25),
	telefone VARCHAR(12)
)
RETURNS void AS
$$
BEGIN
	  INSERT INTO CLIENTE VALUES 
	  (DEFAULT, nome_cli, CPF, bairro_cli, num_cli, logradouro_cli, cep_cli, cidade_cli, email_cli, telefone);
	  RAISE NOTICE 'CLIENTE CADASTRADO COM SUCESSO!';
END;
$$
LANGUAGE plpgsql;

SELECT * FROM CADASTRAR_CLIENTE('John Doe', '123456789', 'Street 1', '123', 'rua200', '12345', 'City', 'doezin@hotmail.com', '86995120059');
SELECT * FROM CLIENTE


/*----------------------------
	CADASTRAR FORNECEDOR
*/----------------------------
CREATE OR REPLACE FUNCTION CADATRAR_FORNECEDOR(
	nome_fn           VARCHAR(40),
  	bairro_fn         VARCHAR(20),
  	num_fn            VARCHAR(13),
  	logradouro_fn     VARCHAR(15),
  	cep_fn            VARCHAR(13),
  	cidade_fn         VARCHAR(20),
	telefone_fn		  VARCHAR(15),
	cpf_fn			  VARCHAR(15),
	email_fn		  VARCHAR(25),
	telefone 		  VARCHAR(12)
)
RETURNS void AS
$$
BEGIN
	  INSERT INTO CLIENTE VALUES 
	  (DEFAULT, nome_fn, bairro_fn, num_fn, logradouro_fn, cep_fn, cidade_fn, telefone_fn, cpf_fn, email_fn, telefone);
	  RAISE NOTICE 'FORNECEDOR CADASTRADO COM SUCESSO!';
END;
$$
LANGUAGE plpgsql;
	   
/*-------------------------------
	   
*/-------------------------------









